input {
  beats {
    port => 5001
    type => "logs"
    add_field => [ "input_type", "filebeat" ]
  }
  syslog {
    port => 514
    type => "syslog"
    add_field => [ "input_type", "syslog" ]
    }
  snmptrap {
    port => 62
    type => "snmptrap"
    add_field => [ "input_type", "snmptrap" ]
    }
}
filter {
    if [source] == "/var/log/apache2/access.log" {
         grok {
           match => { "message" => '%{SYSLOGHOST:apache_client} - - \[%{HTTPDATE:apache_time}\] "(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})" %{NUMBER:response} (?:%{NUMBER:bytes}|-)' }
           add_tag => [ "apache_groked" ]
         }
         syslog_pri { }
         date {
           match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
         }
         geoip {
              source => "apache_client"
              target => "geoip"
              add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
              add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
         }
    }
    if [source] == "/var/log/nginx/access.log" {
        grok {
           match => { "message" => '%{SYSLOGHOST:nginx_client} - - \[%{HTTPDATE:apache_time}\] "(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})" %{NUMBER:response} (?:%{NUMBER:bytes}|-)' }
           add_tag => [ "nginx_groked" ]
        }
        syslog_pri { }
        date {
          match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        }
        geoip {
            source => "nginx_client"
            target => "geoip"
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
    }
    if [source] == "/var/log/auth.log" {
      grok {
        match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?:%{GREEDYDATA:syslog_message}" }
        add_tag => [ "auth_groked" ]
      }
      grok {
	match => { "syslog_message" => " Failed password for (invalid user |)%{USERNAME:username} from %{IP:ssh_client} port %{BASE10NUM:port} ssh2"}
        add_tag => [ "auth_syslog_failed_groked" ]
      }
      grok {
        match => { "syslog_message" => " Accepted password for (invalid user |)%{USERNAME:username} from %{IP:ssh_client} port %{BASE10NUM:port} ssh2"}
        add_tag => [ "auth_syslog_success_groked" ]
      }	  
      geoip {
        source => "ssh_client"
        target => "geoip"
        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
      }
    }
  
    if [input_type] == "syslog" {
      grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
      }
      syslog_pri { }
      date {
        match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      }
    }
}
output {
  elasticsearch {
    hosts => ["elasticsearch"]
  }
}
